//------------------------------------*\
//  #MIXINS
//------------------------------------*/

/// Inserts responsive breakpoints
/// @param {String} $size - Breakpoint size
/// @example scss
///   @include bp(s) { ... }
/// @output @media (min-width: 500px) { ... }
@mixin bp($size) {
  @if $size == xs {
    @media (min-width: $bp-xs) { @content; }
  } @else if $size == s {
    @media (min-width: $bp-s) { @content; }
  } @else if $size == m {
    @media (min-width: $bp-m) { @content; }
  } @else if $size == l {
    @media (min-width: $bp-l) { @content; }
  } @else if $size == xl {
    @media (min-width: $bp-xl) { @content; }
  }
}



/// Clears floats
/// @group helpers
@mixin clearfix {
  //*zoom:1;
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}



/// For a 2col block with a known width + unknown width combination
/// @param {Number} $col - Width of known column
/// @param {Number} $pad - Gutter between columns
/// @param {String} $knownCol - Class name of known
/// @param {String} $unknownCol - Class name of unknown
/// @param {String} $dir [left] - Is .knownCol is floated `left` or `right`?
/// @param {String} $knownPos [before] - Is .knownCol `before` or `after` .unknownCol in markup?
/// @example scss
///   @include wodge(150px,24px,thumbnail,description,left,before);
@mixin wodge($col, $pad, $knownCol, $unknownCol, $dir:left, $knownPos:before) {
  @include clearfix;
  .#{$knownCol} {
    float: $dir;
    width: $col;
    @if $knownPos == after {
      position: absolute;
      top: 0;
      #{$dir}: 0;
    }
  }
  .#{$unknownCol} {
    margin-#{$dir}: $col + $pad;
  }
  // h2,h3,h4,h5 {
  //   margin-top: 0;
  //   @if $dir == left {
  //     clear: right;
  //   }
  //   @else if $dir == right {
  //     clear: left;
  //   }
  // }
}



/// For swapping in @2x images
/// @group helpers
/// @example scss
///   @include at-hdpi { ... }
/// Implement this later when there is more support: (min-resolution: 1.3dppx)
@mixin at-hdpi {
  @media only screen and (-webkit-min-device-pixel-ratio: 1.3),
         only screen and (-o-min-device-pixel-ratio: 13/10),
         only screen and (min-resolution: 120dpi) {
    @content;
  }
}



/// CSS Triangle
/// @param {String} $dir - Direction pointing
/// @param {Number} $base-width - Width of triangle
/// @param {Number} $length - Height of triangle
/// @param {Color} $color - Color of triangle
@mixin triangle($dir, $base-width, $length, $color) {
  width: 0;
  height: 0;
  border: ($base-width / 2) solid transparent;
  @if $dir == top {
    border-top: none;
    border-bottom-width: $length;
    border-bottom-color: $color;
  }
  @else if $dir == right {
    border-right: none;
    border-left-width: $length;
    border-left-color: $color;
  }
  @else if $dir == bottom {
    border-top-width: $length;
    border-bottom: none;
    border-top-color: $color;
  }
  @else if $dir == left {
    border-right-width: $length;
    border-left: none;
    border-right-color: $color;
  }
}



/// Border-radius on one side only
/// @param {String} $side - Direction
/// @param {Number} $rad [$radius] - Radius px
/// @example scss
///   @include side-radius(left);
/// @output border-bottom-left-radius: 3px; border-top-left-radius: 3px;
@mixin side-radius($side, $rad:$radius) {
  @if $side == left {
    border-bottom-left-radius: $rad;
    border-top-left-radius: $rad;
  }
  @else if $side == right {
    border-top-right-radius: $rad;
    border-bottom-right-radius: $rad;
  }
  @else if $side == top {
    border-top-right-radius: $rad;
    border-top-left-radius: $rad;
  }
  @else if $side == bottom {
    border-bottom-right-radius: $rad;
    border-bottom-left-radius: $rad;
  }
}